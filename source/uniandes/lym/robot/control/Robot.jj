/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.HashSet;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;


	private static int dim = 0;
	private static int myXPos = 0;
	private static int myYPos = 0;
	private static int myChips = 0;
	private static int myBallons = 0;
	private int myChipsHere = 0;
	private int myBallonsHere = 0;
	private int spaces = 0;


	private HashMap < String, Integer > funciones = new HashMap < String, Integer > ();
  	private HashMap < String, String > variables = new HashMap < String, String > ();
  	private HashMap < String, Integer > variables_temporales = new HashMap < String, Integer > ();
  	private HashSet < String> condiciones = new HashSet < String> ();
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}

TOKEN: /* Nombres de Comandos */
{
			<MOV : "mov" | "move" >
		| 	<RIGHT: "RIGHT">
		| 	<PUT: "Put">
		| 	<PICK: "Pick">
		|  < POP: "Pop" >
		|  <GO: "GO" >
        |  < HOP:  "HOP" >

        | < LEFT : "left" >
		| < AROUND: "around" >
		| < FRONT : "front" >
		| < BACK : "back" >
		| < UP: "up" >
		| < DOWN : "down" >

		| < DEFVAR : "defvar" >
		| < SKIPP : "skip" >
		| < TURN: "turn" >
		| < FACE :"face" >
		| < MOVEDIR : "move-dir" >
		| < RUNDIRS : "run-dirs" >
		| < MOVEFACE : "move-face" >
}

TOKEN: //COSAS
{
  	< LP : "(" >
	| < RP : ")" >
	| < COLON : ":" >
}

TOKEN:  //SUBESTRUCTURAS
{
	  < IF : "if" >
	| < LOOP : "loop" > 
	| < REPEAT: "repeat" >
	| < DEFUN : "defun" >  
}

TOKEN:
{
		<BALLOONS:  "BALLOONS" >
		|	<CHIPS:     "CHIPS"  >	

}

TOKEN:  //SUBCONDICIONES
{
	  < FACING : "facing?" >
	| < BLOCKED : "blocked?" >
	| < CANPUT : "can-put?" >
	| < CANPICK : "can-pick?" >
	| < CANMOVE : "can-move?" >
	| < ISZERO : "iszero?" >
	| < NOT : "not" >  
}

TOKEN: //CONSTANTES
{
 	< DIM :"dim" >
		| < MYXPOS : "myxpos" >
		| < MYYPOS: "myypos" >
		| < MYCHIPS :"mychips" >
		| < MYBALLONS : "myballoons" >
		| < BALLONSHERE : "balloonshere" >
		| < CHIPSHERE : "chipsHere" >
		| < SPACES : "spaces" >
		
		| < NULL : "null" >
}

TOKEN: //O
{
 	< NORTH : "north" >
		| < SOUTH : "south" >
		| < EAST: "east" >
		| < WEST : "west" >
}

TOKEN :
{
		<NUM: (<DIGIT>)+ >
		|  	<#DIGIT: ["0"-"9"] >     
}

TOKEN :
{
  	<#DIGITO: ["0"-"9"] >
	| < #LETRA : [ "a" - "z" , "A" - "Z"] >

	| < PALABRA : (< LETRA > | "_") (< LETRA >| < DIGITO > | "_")* >
}



	//boolean command(uniandes.lym.robot.view.Console sistema) :
	boolean command(Console sistema):
	{	
		
		int x,y;
		salida=new String();	
	}

	
	{
		(		  (
		   <RIGHT> "(" ")" {world.turnRight();salida = "Command: Turnright";}
		| 	<MOV>  "(" x=num() ")" {world.moveForward(x,false);salida = "Command: Moveforward ";}  
		| 	<HOP>  "(" x=num() ")" {world.moveForward(x,true);salida = "Command:Jumpforward ";}
		| 	<GO>  "(" x=num() "," y=num()")" {world.setPostion(x,y);salida = "Command:GO ";}  
		|  <PUT> "("  put() ")"					  			
		|  <PICK> "(" get()  ")"	
	    |  < POP > "(" x=num() ")" {world.popBalloons(x); salida = "Comando:  Pop";}
		) ";" 

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;} 
	}

	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void get() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}

	
	

	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}



	int constante (): {
		int respuesta = -1;
	}
	{
	  (	    	( < DIM > { respuesta = this.dim; } )
		| 	( < MYXPOS > { respuesta = this.myXPos; } )
		| 	( < MYYPOS > { respuesta = this.myYPos; } )
		| 	( < MYCHIPS  > { respuesta = this.myChips; } )
		| 	( < MYBALLONS > { respuesta = this.myBallons; } )
		| 	( < BALLONSHERE > { respuesta = this.myBallons; } )
		| 	( < CHIPSHERE >{ respuesta = this.myChipsHere; } )
		|   ( < SPACES > { respuesta = this.spaces; } )
		)
| 		{ return respuesta;}
	}
	

void direccionn(): {}
{
  < COLON >
  (< LEFT > | < FRONT > | < BACK >| < RIGHT >) 
}

void orientacion(): {}
{
  < COLON >
  (< NORTH > | < SOUTH > | < WEST >| < EAST >) 
}

void objeto(): {}
{
  < COLON >
  (< BALLOONS > | < CHIPS >) 
}

String valor_variable(): { String name = ""; }
{
  < COLON >
  < PALABRA > { name = token.image; return name;}
}

void comandos(): { }
{
  (    < LP >
  (    < MOV > (< NUM > | valor_variable() | constante())
  | < SKIPP > (< NUM > | valor_variable() | constante())
  | < FACE > orientacion()
  | < PUT > objeto() (< NUM > | valor_variable() | constante())
  | < PICK > objeto() (< NUM > | valor_variable() | constante())
  | < MOVEDIR > (< NUM > | valor_variable() | constante()) direccionn()
  | < RUNDIRS > (direccionn())+
  | < MOVEFACE > (< NUM > | valor_variable() | constante()) orientacion()
  | < NULL >
  
  )
  < RP > )+
}

void subcondicion(): { }
{
  < LP >
  (
    < FACING > orientacion()
  | < BLOCKED >
  | < CANPUT > objeto()(< NUM > | valor_variable() | constante())
  | < CANPICK > objeto()(< NUM > | valor_variable() | constante())
  | < CANMOVE > orientacion()
  | < ISZERO > (< NUM > | valor_variable() | constante())
  | < NOT > subcondicion()
  
  )
  < RP >
}

void subestructuras(): { }
{
  < LP >
  (
    < IF > subcondicion() comandos() comandos()
  | < LOOP > subcondicion() comandos()
  | < REPEAT > (< NUM > | valor_variable() | constante()) comandos()
  
  )
  < RP >
}

lklkl

